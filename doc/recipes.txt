##### most commonly used ####

git add .
git commit

git flow feature finish smart_gateway

git push origin develop
cap deploy --set-before ocp_server=linode
cap logs:watch --set-before ocp_server=linode

cap deploy --set-before ocp_server=pilot
cap logs:watch --set-before ocp_server=pilot

# kannel
sudo vim /etc/kannel/kannel.conf
sudo /etc/init.d/kannel stop
ps ax | grep kannel
sudo /etc/init.d/kannel start
sudo tail -f /tmp/*.log


##### generate #####

#model in singular
ruby script/generate model outbound

#controller in plural usually
ruby script/generate controller ip

ruby script/generate controller roster index show new create edit update delete delete_all
ruby script/generate controller kannel index deliveryreport receive

ruby script/generate migration add_raw_flag_to_msg

##### db migrations #####

cd /home/www/lifeline/current
export RAILS_ENV=production
rake db:migrate


rake db:migrate VERSION=0

rake db:migrate VERSION=20100205203438

rake db:migrate

##### testing #####
rake test:units
rake test:functional

# to run just single test files
ruby -I test test/unit/product_test.rb

ruby -I test test/functional/members_controller_test.rb -n test_browse

# may get cannot find file test_helper, then just use the following line
rake test TEST=just_one_file.rb     # run just one test file.

##### Load Testing #####

# Apache Bench
ab

# 3 posts 1 at a time
ab -n 3 -c 1 http://127.0.0.1:3000/posts


### Git
git init
git remote add origin git@github.com:narath/lifeline.git
git pull origin master
git status
git add .
git commit -a -m "don't show full address list in message send form"
git push origin master

# to turn off warning: LF will be converted to CRLF
# go to the project directory
git config core.autocrlf false

sudo gem sources -a http://gems.github.com

# basic sqlite3 commands
sqlite3 db/development.sqlite3
.q
.schema (tablename)

##### Creating Releases with GIT
When getting ready for release, follow these steps

1. Create a release branch RB_MAJOR.MINOR e.g. RB_1.0
git branch RB_1.0

Note: will be helpful to store the release information in a file in the code somewhere so this can be identified
No new features to this branch, just fixes
Once minor fixes and is vetted
2. Tag it with the release
git tag 1.0
git push origin tag 1.0

3. delete the release branch (you need to switch back to master since you cannot delete the branch you are on)
git checkout master
git branch -D RB_1.0

# to make an update to a particular release
1. Create a release update branch
git branch RB_1.0.1 1.0

2. checkout the release branch
git checkout RB_1.0.1

3. Make changes, and then tag the updated release
git tag 1.0.1

4. delete the update branch
git checkout master
git branch -D RB_1.0.1

##### Creating branches with git
To create a branch called kannel:

 $ git branch kannel

Then make kannel your active branch (commits will go to kannel):

 $ git checkout kannel

Then commit and push to github.

FYI, here are some other useful commands:

 $ git checkout master   # switch to master branch
 $ git checkout kannel   # switch back to kannel
 $ git branch            # see which branch you're on

It's easy to merge with the main branch later:

 $ git checkout master
 $ git merge kannel

Then you can delete the branch:

 $ git branch -d kannel

More info here:

 http://book.git-scm.com/3_basic_branching_and_merging.html


### Rails environment
# create local version of rails api
http://api.rubyonrails.org
rails rails_help
cd rails_help
rake freeze:gems
rake rake:doc
# docs will be in doc/api

# use tail -f to watch the rails log files


# mysql

mysql -u root ocp_development

# Dell

ifconfig

mysql -u opencellpager ocp_production -p 


### linux ###

# force kill a process
kill -9 pid 

# list processes
ps ax

# find out who is using the log file
fuser log/production.log

# how to clear a log file, use "> logfile"
> log/production.log
# see http://aplawrence.com/SCOFAQ/FAQ_scotec1clearlogs.html


